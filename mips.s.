.data
input_string:   .space 1001   # space allocation for an input string
prompt:         .asciiz "Enter a string: "
delimiter:      .asciiz "/"
newline: .asciiz "\n"

.text
main:
    # Prompt user for input
    li $v0, 4
    la $a0, prompt
    syscall

# Read input string
    li $v0, 8
    la $a0, input_string
    li $a1, 1000
    syscall

 
    jal process_whole_string

    # Exit program
    li $v0, 10
    syscall

process_whole_string:
    # Initialize index and buffer pointer
    move $s0, 0            # actually store input string address into $a0 as per requirements
    li $t0, 0

process_loop:
    # Load byte from input_string
    lb $t1, 0($s0)

    # Check for the end of string
    beqz $t1, end_process

    # Check if char is a digit or not
    li $t2, 48
    li $t3, 57
    blt $t1, $t2, check_character
    bgt $t1, $t3, check_character


    #Converting the digit to an integer and adding to the current sum
    sub $t1, $t1, 48
    add $t0, $t0, $t1
    j next_char

check_char:
    # Check if the character is an alphabet
    li $t3, 65      # ASCII value of 'A'
    li $t4, 122     # ASCII value of 'z'
    blt $t2, $t3, handle_special_char
    bgt $t2, $t4, handle_special_char

    # Convert lowercase to uppercase
    li $t5, 97
    bge $t2, $t5, to_uppercase

    # Calculate the value of the alphabet and add to sum
    sub $t2, $t2, $t3
    addi $t2, $t2, 10
    add $t1, $t1, $t2
    j next_character






  to_uppercase:
        addi $t2, $t2, -32    # Subtract 32 to convert to uppercase
        j check_char


invalid_char:
        # Invalid character handling
        j process_next_character




process_next_char:
    addi $s0, $s0, 1   # Move to the next character in the input string
    j process_loop

end_process:
    # Print the sum
    li $v0, 1
    move $a0, $t1
    syscall
    
    # Print a newline
    li $v0, 4
    la $a0, newline
    syscall
    
    # Exit the function
    jr $ra


